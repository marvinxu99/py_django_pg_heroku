from django.db import models
from django.utils import timezone
from django.conf import settings
from django.utils.translation import gettext_lazy as _ 
from django.urls import reverse
from markdown import markdown
from django.utils.html import mark_safe
from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver

from .tag import Tag
from .project import Project
from ..itrac_utils import unique_slug_generator

#from django.apps import apps
#MyModel1 = apps.get_model('app1', 'MyModel1')

class ISSUE_TYPE(models.TextChoices):
    BREAK_FIX =     '01', _('Break/fix')
    FEATURE =       '02', _('New feature')
    OPTIMIZATION =  '03', _('Optimization')
    TASK =          '04', _('Task')


class ISSUE_STATUS(models.TextChoices):
    OPEN =          '01', _('Open')
    INVESTIGATE =   '02', _('Investigate')
    TRIAGE =        '03', _('Await approval')
    BUILD_IN_PROGRESS = '04', _('Build in progress')
    VALIDATING =    '05', _('Validate in progress')
    COMPLETE =      '06', _('Complete')
    CLOSED =        '07', _('Closed')

class ISSUE_PRIORITY(models.TextChoices):
    PRIORITY_1 =  '1', _('1 - highest')
    PRIORITY_2 =  '2', _('2')
    PRIORITY_3 =  '3', _('3')
    PRIORITY_4 =  '4', _('4')
    PRIORITY_5 =  '5', _('5 - lowest')

class Issue(models.Model):
    """
    A single Issue
    """
    # This id is generated by the post_save signal
    # coded_id = project.code + Issue.pk
    coded_id = models.CharField(max_length=40, null=True)

    project = models.ForeignKey(Project, related_name='issues', null=True, on_delete=models.CASCADE)
    issue_type = models.CharField(max_length=2, choices=ISSUE_TYPE.choices, default=ISSUE_TYPE.BREAK_FIX)
    status = models.CharField(max_length=2, choices=ISSUE_STATUS.choices, default=ISSUE_STATUS.OPEN)
    priority = models.CharField(max_length=1, choices=ISSUE_PRIORITY.choices, null=True)

    title = models.CharField(max_length=200)
    description = models.TextField(max_length=4000, blank=True)
    slug = models.CharField(max_length=250, blank=True)
    
    is_resolved = models.BooleanField(default=False)
    resolved_date = models.DateField(blank=True, null=True)
    resolution_details = models.CharField(max_length=250, blank=True, null=True)
    
    upvotes = models.IntegerField('likes', default=0)
    
    tags = models.ManyToManyField(Tag, related_name='issues', blank=True)
    
    image = models.ImageField(upload_to='img', blank=True, null=True)

    created_date = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True)
    updated_by = models.ForeignKey(settings.AUTH_USER_MODEL,related_name='issue_updated_by', on_delete=models.CASCADE, blank=True)
    author = models.ForeignKey(settings.AUTH_USER_MODEL,related_name='issue_author', on_delete=models.CASCADE)
    assignee = models.ForeignKey(settings.AUTH_USER_MODEL,related_name='issue_assignee', null=True, on_delete=models.CASCADE)

    price = models.DecimalField(max_digits=6, decimal_places=2, default=0)

    class Meta:
        verbose_name = "issue"
        verbose_name_plural = "issues"
        ordering = ['title']
        indexes = [
            models.Index(fields=['title',]),            
            models.Index(fields=['coded_id',]),            
        ]

    def __unicode__(self):
        return self.title

    def __str__(self):
        return self.title

    # @property
    # def issue_id(self):
    #     return f"{self.project.code}-{self.id}"

    def get_absolute_url(self):
        return reverse('itrac:issue_detail', args=(self.slug,))

    def get_description_as_markdown(self):
        return mark_safe(markdown(self.description, safe_mode='escape'))


# update the issue.coded_id
@receiver(post_save, sender=Issue)
def set_issue_coded_id(sender, instance, created, **kwargs):
    if created: 
        instance.coded_id = f'{ instance.project.code }-{ instance.pk }'
        instance.save()

# update the issue_prefix
@receiver(pre_save, sender=Issue)
def set_issue_slug(sender, instance, **kwargs):
    if not instance.slug:
        instance.slug = unique_slug_generator(instance)


